

01. What/Why is Trigger? Where/How it works?
02. Restriction on The Database Triggers.
03. How to check Error of a Trigger.

04. How to Audit(who insert/update/delete data in) Table Using DML Triggers?
05. How To Create Synchronized Table Backup Using DML Trigger?

06. How to check who create/drop/alter object like table and who log into database and when.
     -How to audit Schema & Database Using DDL Trigger?

07.  How to Insert/update/delete on a view?
     -What/Why INSTEAD-OF Trigger? How to create Instead-Of INSERT/UPDATE/DELETE Trigger?

======================

01. What/Why is Trigger? Where/How it works?
--------------------------------------------
-Specialized stored programs which execute implicitly(পরোক্ষভাবে) when a triggering event occurs.
     -For Auditing purpose (keep an eye on the various changes on Table/Schema/Database).
-Cannot call and execute them directly instead they only get triggered by events in the database.


Why/Adv. trigger?
-----------------
We can--
01. -Enforce business rules that can’t be defined by using integrity constants.
02. -Gain strong control over the security.
03. -Collect statistical information on the table access.
04. -Generate values for derived columns such as auto increment numeric primary key.
05. -Prevent the invalid transactions Using database triggers.


These events can be anything such as:
-------------------------------------
1. A DML Statement – An Update/Insert/Delete statement executing on any table of database. Either BEFORE or AFTER executing of statement.
                     -Auditing purpose (keep an eye on the various changes on Table).
2. A DDL Statement – CREATE/DROP/ALTER schema/db. Either BEFORE or AFTER the execution of statement. 
                     -DBAs for auditing purpose (keep an eye on the various changes on schema/DB like who create TABLE).
3. A system event. – Shut down or startup of database.
4. A User Events   – Such as log off or log on onto database. Either execute before or after the event. 
                     -Auditing time of event occur, the username who created it.


02.Restriction on The Database Triggers:
=========================================
-> Trigger size must not exceed 32,760 bytes. 
-> Stored in LONG datatypes columns but LONG or LONG RAW variable is not permissible in the body of the trigger.
-> May not issue TCL statements such as COMMIT, ROLLBACK or SAVEPOINT.
-> All operations performed when the trigger fires, become part of a transaction unless it contains an autonomous transaction.


03. How to check ERROR of a TRIGGER:
====================================
SHOW ERRORS TRIGGER trigger_name;   //Check Error
select * from user_errors where  type = 'TRIGGER' and  name = 'TRIG_NAME';   //Check syntax error in a trigger:


04. How to Audit(who insert/update/delete row in) Table Using DML Triggers?
===========================================================================
CREATE TABLE superheroes(
                        CUST_NAME VARCHAR2(50);
                        DESIGNATION VARCHAR2(50)
                        )
--
CREATE TABLE sh_audit(
  new_name varchar2(30),
  old_name varchar2(30),
  user_name varchar2(30),
  entry_date varchar2(30),
  operation  varchar2(30)
);
--

CREATE OR REPLACE trigger superheroes_audit
BEFORE INSERT OR DELETE OR UPDATE ON superheroes
FOR EACH ROW
ENABLE

DECLARE
  v_user varchar2 (30);
  v_date  varchar2(30);
BEGIN
  SELECT user, TO_CHAR(sysdate, 'DD/MON/YYYY HH24:MI:SS') INTO v_user, v_date  FROM dual;
  IF INSERTING THEN
    INSERT INTO sh_audit (new_name,old_name, user_name, entry_date, operation) 
    VALUES(:NEW.CUST_NAME, Null , v_user, v_date, 'Insert');
  ELSIF UPDATING THEN
    INSERT INTO sh_audit (new_name,old_name, user_name, entry_date, operation) 
    VALUES(:NEW.CUST_NAME, :OLD.CUST_NAME, v_user, v_date, 'Insert');
  ELSIF DELETING THEN
    INSERT INTO sh_audit (new_name,old_name, user_name, entry_date, operation) 
    VALUES(Null, :OLD.CUST_NAME, v_user, v_date, 'Delete');
  END IF;
END;


05. How To Create Synchronized Table Backup Using DML Trigger?
==============================================================
Tut: http://www.rebellionrider.com/how-to-create-synchronized-table-backup-using-dml-trigger-in-oracle-pl-sql/

**NO GOOD for those tables that involve heavy data input, deletion and updation due to the performance reasons.
--
CREATE TABLE superheroes_backup AS SELECT * FROM superheroes WHERE 1=2;
--
CREATE OR REPLACE trigger superheroes_backup
BEFORE INSERT OR DELETE OR UPDATE ON superheroes
FOR EACH ROW
ENABLE

DECLARE

BEGIN
  IF INSERTING THEN
    INSERT INTO superheroes_backup (cust_name,designation) 
    VALUES(:NEW.CUST_NAME, :NEW.designation);
  ELSIF UPDATING THEN
    UPDATE superheroes_backup SET cust_name=:NEW.CUST_NAME, designation=:NEW.DESIGNATION WHERE cust_name=:OLD.CUST_NAME;
  ELSIF DELETING THEN
    DELETE FROM superheroes_backup WHERE cust_name=:OLD.CUST_NAME;
  END IF;
END;


06. How to audit Schema & Database Using DDL Trigger?
=====================================================
Tut: http://www.rebellionrider.com/schema-database-auditing-using-ddl-trigger-in-pl-sql/

--
CREATE TABLE schema_audit(
    ddl_date       DATE,
    ddl_user       VARCHAR2(15),
    object_created VARCHAR2(15),
    object_name    VARCHAR2(15),
    ddl_operation  VARCHAR2(15)
  );
--
Audit to Schema(Any user)
-------------------------
CREATE OR REPLACE TRIGGER hr_audit_tr 
AFTER DDL ON SCHEMA
BEGIN
    INSERT INTO schema_audit VALUES (
sysdate, 
sys_context('USERENV','CURRENT_USER'), 
ora_dict_obj_type, 
ora_dict_obj_name, 
ora_sysevent);
END;

Audit to Database
-----------------
CREATE OR REPLACE TRIGGER db_audit_tr 
AFTER DDL ON DATABASE
BEGIN
    INSERT INTO schema_audit VALUES (
sysdate, 
sys_context('USERENV','CURRENT_USER'), 
ora_dict_obj_type, 
ora_dict_obj_name, 
ora_sysevent);
END;



07. What/Why INSTEAD-OF Trigger? How to create Instead-Of INSERT/UPDATE/DELETE Trigger?
=======================================================================================

Instead-of triggers in oracle database provide a way of modifying ONLY VIEWS(NOT TABLE) that cannot be modified directly through the DML statements. 
By using Instead-of triggers, you can perform Insert, Update, Delete and Merge operations on a view in oracle database.

What are Modifiable and Non Modifiable Views?
---------------------------------------------
A view is naturally modifiable if you do not require INSTEAD OF triggers to insert, delete or update data as well as if it complies to the restrictions discussed 
herewith. If the view query comprises of any of the mentioned constructs, 
then it is not naturally modifiable and therefore you cannot perform inserts, updates, or deletes on the view:

Set operators
Aggregate functions
GROUP BY, CONNECT BY, or START WITH clauses
The DISTINCT operator
Joins (however, some join views are updatable)


INSTEAD OF INSERT Trigger
========================

Step1: Create Tables Table 1- trainer and Table 2- Subject
CREATE TABLE trainer ( full_name VARCHAR2(20));
CREATE TABLE subject( subject_name VARCHAR2(15) );
Insert dummy data into the above tables

INSERT INTO trainer VALUES ('Manish Sharma');
INSERT INTO subject VALUES ('Oracle');

Step 2: Create View that will show the combined result of the data from the two tables above.
CREATE VIEW vw_rebellionrider AS
SELECT full_name, subject_name FROM trainer, subject;

This is a non-updatable view which you can confirm by executing any DML statement over it. Error as a result of DML operation on this view will be your confirmation.

Step 3: Create INSTEAD OF Insert trigger over the view vw_rebellionrider that we created in step 2.

CREATE OR REPLACE TRIGGER tr_Io_Insert
INSTEAD OF INSERT ON vw_rebellionrider
FOR EACH ROW
BEGIN
  INSERT INTO trainer (full_name) VALUES (:new.full_name);
  INSERT INTO subject (subject_name) VALUES (:new.subject_name);
END


Instead-Of UPDATE Trigger
-------------------------
Instead-of update trigger will override the default behavior of your update operation when you execute the update statement and will let you update the data of the underlying tables over which your view is created.

Example:
Tables (Trainer and Subject) and View (VW_RebellionRider) used in this example are the same as the ones we created in the previous tutorial.

CREATE OR REPLACE TRIGGER io_update
INSTEAD OF UPDATE ON vw_rebellionrider
FOR EACH ROW
BEGIN
  UPDATE trainer SET FULL_NAME = :new.full_name 
  WHERE FULL_NAME = :old.full_name;
  UPDATE subject SET subject_NAME = :new.subject_name 
  WHERE subject_NAME = :old.subject_name;
END;
/

Instead-of DELETE trigger Example:
----------------------------------
In this example I will again use the View VW_RebellionRider which we created earlier and have consistently used in this Instead-of trigger series so far.

Needless to say that executing DELETE DML on this view will return an error because of its non-updatable nature. Thus the only way to perform DELETE DML on this view is by using an Instead of trigger. Let’s quickly create one.

CREATE OR REPLACE TRIGGER io_delete
INSTEAD OF DELETE ON vw_RebellionRider
FOR EACH ROW
BEGIN
  DELETE FROM trainer WHERE FULL_NAME = :old.FULL_NAME;
  DELETE FROM subject WHERE SUBJECT_NAME= :old.SUBJECT_NAME;
END;
/









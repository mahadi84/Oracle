

** A well structured query, written today could save you from catastrophic events in the future.
** Learning small concepts could help you in gaining experience which could lead to a better query writing skill. 


01. What Bulk Collection?
    A) When should we use Bulk Collect with Select-Into statement?
    B) What should I do if my SELECT statement is retrieving huge number of rows?
    C) When does Bulk Collect Clause uses an Implicit Cursor and when an Explicit Cursor?
02. Why can’t we limit the data fetched using Bulk Collect in SELECT-INTO statement?
03. Can we store the result returned by the bulk collect clause into a variable of primitive (NON-COLLLECTION) datatype, If do, what errors shows?
04. Example: How to use PL/SQL Bulk Collect with FETCH-INTO statement?
05. EXAMPLE: How to use LIMIT clause with Bulk Collect statement?
06. What is the right amount of rows we can fetch?



=====================================================


01. What/Why Bulk Collection?
----------------------------
The process of fetching batches of data from PL/SQL runtime engine to SQL engine and vice versa is called Bulk Data Processing.
Bulk collect is all about reducing context switches and improving the performance of the query. 

Bulk collect clause can be used with SELECT-INTO, FETCH-INTO and RETURN-INTO clauses.
With the help of Bulk Collect Statement we can SELECT, INSERT, UPDATE or DELETE large data sets from database objects such as Tables or Views.

 01.A) When should we use Bulk Collect with Select-Into statement?
-----------------------------------------------------------
When you are certain that the returning result of your SELECT statement is small then you should use Bulk Collect clause with Select-Into statement. 
Otherwise your bulk collect clause will make your Select-Into statement a memory hogging monster. 
Consequently it will slowdown the performance of your database. 

 01.B)What should I do if my SELECT statement is retrieving huge number of rows?
 -------------------------------------------------------------------------------
You can always use LIMIT clause along with the Bulk Collect to limit the number of rows fetched from the database. 
But this is only possible when we are using the Bulk Collect clause with PL/SQL Cursors.
Nonetheless, we will discuss about this in detail in the next tutorial.


01.C) When does Bulk Collect Clause uses an Implicit Cursor and when an Explicit Cursor?
----------------------------------------------------------------------------------
If we are using Bulk Collect Clause with a SQL statement such as SELECT-INTO it uses an implicit cursor. 
On the other hand whenever we use Bulk Collect clause with the FETCH statement it uses an explicit cursor.



02. Why can’t we limit the data fetched using Bulk Collect in SELECT-INTO statement?
--------------------------------------------------------------------------------
When we use Bulk Collect clause with SELECT-INTO statement it uses implicit cursor to perform the task of bulk data processing. 
However Limit Clause can only be used with Bulk Collect clause, when the latter is using Explicit Cursor for data processing.





03. Can we store the result returned by the bulk collect clause into a variable of primitive datatype?
--------------------------------------------------------------------------------------------------
No, as of now PL/SQL Collections are the only supportive datatypes for Bulk Data Processing with Bulk Collect Clause in Oracle Database. 
In case if you try to store the data retrieved using Bulk Collect clause into a variable of datatype 
such as Char, Number or Varchar2 you will get an error which will read something like this:
    “PLS-00497: Cannot mix between single row and multi-row (BULK) in INTO list”

SYNTEX:
-------
SET SERVEROUTPUT ON;
DECLARE
    TYPE nt_fName   IS TABLE OF VARCHAR2 (20);
    TYPE nt_lName   IS TABLE OF VARCHAR2 (20);
    
    fname   nt_fName;
    lName   nt_lName;
BEGIN
    SELECT first_name, last_name 
        BULK COLLECT INTO fName, lName 
    FROM employees; 
        
        --Print values from the collection--
    FOR idx IN 1..fName.COUNT
    LOOP
        DBMS_OUTPUT.PUT_LINE (idx||' - '||fName (idx) ||' '||lName (idx));
    END LOOP;
END;


==============================FETCH INTO================================
How To Use PL/SQL Bulk Collect Clause With FETCH INTO Statement?
http://www.rebellionrider.com/how-to-use-pl-sql-bulk-collect-clause-with-fetch-into-statement/


04. Example: How to use PL/SQL Bulk Collect with FETCH-INTO statement?
------------------------------------------------------------------
SET SERVEROUTPUT ON;
DECLARE
--Create an explicit cursor
    CURSOR exp_cur IS
    SELECT first_name FROM employees;

    --Declare collection for holding the data 
    TYPE nt_fName   IS TABLE OF VARCHAR2 (20);
    fname   nt_fName;
BEGIN
    OPEN exp_cur;
    LOOP
        FETCH exp_cur BULK COLLECT INTO fname;
        EXIT WHEN fname.count=0;
        --Print data
        FOR idx IN fname.FIRST.. fname.LAST
        LOOP
            DBMS_OUTPUT.PUT_LINE (idx||' '||fname(idx) );
        END LOOP; 
    END LOOP;
    CLOSE exp_cur;
END;


====================Bulk Collect With LIMIT============================

PL/SQL Bulk Collect With LIMIT Clause:
--------------------------------------
http://www.rebellionrider.com/pl-sql-bulk-collect-with-limit-clause-in-oracle-database/


05. EXAMPLE: How to use LIMIT clause with Bulk Collect statement 
----------------------------------------------------------------
So always remember the LIMIT clause can only be used when you are using BULK COLLECT with FETCH-INTO statement.
It cannot be used when you are using bulk collect with SELECT-INTO statement.


SET SERVEROUTPUT ON;
DECLARE
    CURSOR exp_cur IS
    SELECT first_name FROM employees;
    
    TYPE nt_fName   IS TABLE OF VARCHAR2(20);
    fname   nt_fName;
BEGIN
    OPEN exp_cur;
    FETCH exp_cur   BULK COLLECT INTO fname     LIMIT 10;
    CLOSE exp_cur;
    --Print data
    FOR idx IN 1 .. fname.COUNT
    LOOP
        DBMS_OUTPUT.PUT_LINE (idx||' '||fname(idx) );
    END LOOP;
END;



06. what is the right amount of rows we can fetch?
----------------------------------------------
There is a shortcoming with this approach also and that is: 
If you execute this same program again, then this FETCH-INTO statement with LIMIT clause will not append the collection with next 10 records. 
Rather, it will truncate the table and populate the nested table again from the index no.1.
My dear friend Connor McDonald has done a blog explaining how you can overcome this problem using MULTISET. Go ahead and checkout his article.






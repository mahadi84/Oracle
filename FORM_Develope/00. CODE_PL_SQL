


01. CREATE and CHECK table's COLUMN name and DATA Type?
02. INSERT/UPDATE/DELETE
03. Change/Add-Table/Cloumn/Data Type?

04. IF..ELSE vs CASE
05. PACKGE CRUD (FUNCTION and PROCEDURE)
06. CURSOR and (Why)REF CURSOR (dynamic sql with multi row query with REF CURSOR)?




=====================================================

01. 
create table emp(emp_id number, dept_id number, first_name varchar2(50), salary number, constraint emp_pk primary key (emp_id));
insert into emp values(1, 200, 'Mahadi', 1000);
insert into emp values(2, 300, 'Mahafuj', 1500);
insert into emp values(3, 200, 'Jahid', 2000);
insert into emp values(4, 300, 'Laiba',  5000);
insert into emp values(5, 200, 'Mehjabin', 5500);
select * from emp;  
DESC cust;   / To check table's COLUMN name and DATA Type


02.
INSERT INTO tbl_name(col1,col2) VALUES('value1', 'value2');
UPDATE tbl_name SET col1='value1' where id=1;
DELETE FROM superheroes WHERE cust_name = 'PUBALI';

03. Change/Add-Table/Cloumn/Data Type:
----------------------------------
ALTER TABLE table_name RENAME to new_table_name;            /Table name Change
ALTER TABLE table_name RENAME COLUMN old_name TO new_name;  /Column name Change
ALTER TABLE table_name ADD column_name datatype;            /New Clumn Add
ALTER TABLE table_name MODIFY COLUMN column_name datatype;  /Datatype change



------04. IF..ELSE vs CASE----------

DECLARE
d varchar2(50);
BEGIN
d := 'B';
-- IF    d = 'A' THEN dbms_output.put_line('Excelent');
-- ELSIF d = 'B' THEN dbms_output.put_line('GOOD');
-- ELSE  dbms_output.put_line('NO MATCH FOUND');
-- END IF;
CASE
WHEN d = 'A' THEN dbms_output.put_line('Excelent');
WHEN d = 'B' THEN dbms_output.put_line('GOOD');
ELSE dbms_output.put_line('NO DATA FOUND');
END CASE;
END;



=================== 05. PACKGE CRUD (FUNCTION and PROCEDURE) ============
create sequence emp_seq;

CREATE OR REPLACE PACKAGE crud_emp IS
   procedure insert_emp(first_name varchar2, dept_id number, salary number);
   procedure delete_emp(p_emp_id number);
   function  get_emp(p_emp_id number) return varchar2;
END;

-----PKG-BODY----
CREATE OR REPLACE PACKAGE BODY crud_emp IS
   procedure insert_emp(first_name varchar2, dept_id number, salary number) is
   begin
        insert into emp values(emp_seq.nextval, first_name, dept_id, salary);
        commit;
        
        exception 
        when others then 
        dbms_output.put_line(sqlcode);
        dbms_output.put_line(sqlerrm);
   end;
   
   procedure delete_emp(p_emp_id number) is
   begin
        delete from emp  where emp_id =p_emp_id ;
          commit;
          
        exception 
        when others then 
        dbms_output.put_line(sqlcode);
        dbms_output.put_line(sqlerrm);
   end;
   
   function  get_emp(p_emp_id number) return varchar2 is
   v_name emp.first_name%type;
   begin
        select first_name into v_name from emp where emp_id=p_emp_id;
        return v_name;
        
        exception
        when others then 
        return null;
   end; 
END;
+++++++++++++++++++++END PKG+BODY+++++++++++++++++++++++++++++++

================== 06. CURSOR and REF CURSOR===================
DECLARE
CURSOR myCur IS SELECT * FROM tbl; 
    v VARCHAR2(100);
    n NUMBER;
BEGIN   
    --FOR i IN myCur(Parameter) LOOP   
    OPEN myCur;
        LOOP
            EXIT WHEN myCur%notfound;
            FETCH myCur INTO v, n  ;
            END LOOP;
        CLOSE myCur;
END
=========REF CURSOR======

-- the ref cursor can be opend many times with dif query
TYPE refCur IS REF CURSOR;
     vData refCur;
BEGIN
   OPEN refCur FOR  SELECT * FROM tbl_name;
   LOOP
      fetch refCur INTO vData 
      exit when refCur%notfound;
      dbms_output.put_line(vData.first_name);
    END LOOP;
END;

---------dynamic sql with multi row query with REF CURSOR----------
CREATE OR REPLACE PROCEDURE emp_list  (p_dept_id number default null ) IS
TYPE  c_emp_dept IS REF CURSOR;
d_cur c_emp_dept;

v_empno emp.emp_id%type;
v_first_name emp.first_name%type;

v_sql varchar2(1000):='select emp_id, first_name from emp';

BEGIN
   if p_dept_id is null then
   OPEN d_cur for v_sql;
   else
   v_sql:=v_sql||'  where dept_id=:id';
   OPEN d_cur for v_sql using p_dept_id;
   end if;
     
     loop
      fetch d_cur into v_empno, v_first_name;
      exit when d_cur%notfound;
      dbms_output.put_line(v_empno||' '||v_first_name);
    end loop;
 CLOSE d_cur; 
END;

+++++++++++++++++++++END REF CURSOR+++++++++++++++++++++++++++++++





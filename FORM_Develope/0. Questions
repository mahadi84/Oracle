




00. What is an Exception/Run Time Error with example? Type of Exception? Name few debugging tools for PL/SQL?
01. What is/When to use Cursors, example?
02. What is a Record? When to use what-Record/Types of Record?

03. When to use (DML/DDL) dynamic SQL and Example? (Topic: Native Dynamic SQL)
04. What is/When to use NESTED TABLE/VARRAYs/ASSOCIATIVE Array? (Topic: Collection)

05. How to select BULK DATA and show ? (Topic: Bulk collection)
06. When to use these Collection Functions:-- (Topic: Collection Methode)
                          A) Count  B) Exists C) First, Last D) Limit E) Prior, Next
                      Collection Procedures:--
                          A) Delete B) Extend C) Trim
07. What is/When to use a FORALL statement?

08. What are/When to use PL/SQL Strong/Weak/SYS_REFCURSOR Ref Cursors? (Topic: Cursors -Reff (Strong, Weak and SYS_REFCURSOR) Cursor)?
09. What is/When to use Trigger? When to use what trigger/Type of trigger?
10. Why/How to create and use a PL/SQL Packages? What a packege contain?
11. FUNCTION VS PROCEDURE, How to create and use as FUNCTION and PROCEDURE?




Questions to look for answer:
-----------------------------
01. Why I use EXCEPTION while I can do same job with DBMS_OUTPUT.PUT_LINE()?
02. 



==================================================== ANSWERs =========================================
----------------------00. What is an Exception? Type of Exception?-----------------------------------------
Runtime Error: 
Runtime errors are errors that occur while code is executing. 
These errors can arise due to DATA problems or CODE problems. 
For instance, attempting to assign a 31-character string to a varchar2 (30) variable will cause a runtime error.

Debugging Tool: DBMS_Output.Put_Line()

EXCEPTION:
DECLARE 
   c_id customers.id%type := &cc_id; 
   c_name customerS.Name%type; 
   c_addr customers.address%type;  
   -- user defined exception 
   ex_invalid_id  EXCEPTION; 
BEGIN 
   IF c_id <= 0 THEN 
      RAISE ex_invalid_id; 
   ELSE 
      SELECT  name, address INTO  c_name, c_addr 
      FROM customers 
      WHERE id = c_id;
      DBMS_OUTPUT.PUT_LINE ('Name and Address: '||  c_name ' || c_addr);  
   END IF; 

EXCEPTION 
   WHEN ex_invalid_id THEN 
      dbms_output.put_line('ID must be greater than zero!'); 
   WHEN no_data_found THEN 
      dbms_output.put_line('No such customer!'); 
   WHEN others THEN 
      dbms_output.put_line('Error!');  
END;


-----------------------------------------------01. What is Cursor with example?-------------------------------------------

A special memory region inside the Process Global Area (PGA) which helps oracle server in processing an SQL statement
This includes:
> Rows returned by a query. > Number of rows processed by a query.
> A pointer to the parsed query in the shared pool.
> Using cursor you can control the context area as it is a pointer to the same.

EXAMPLE:-----
DECLARE
  v_name VARCHAR2(30);
  v_age  NUMBER(10);
  CURSOR cur_RebellionRider
  IS
  SELECT name, age FROM customers; 
BEGIN
  OPEN cur_rebellionrider;
  LOOP
    FETCH cur_rebellionrider INTO v_name, v_age; 
    EXIT WHEN cur_rebellionrider%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(v_name ||' '||v_age); 
  END LOOP;
  CLOSE cur_rebellionrider;
END;



--------------------------------------02. What is a Record  and its type in datatype?--------------------------------------------------

A record is a group of related data items stored in fields, each with its own name and datatype. The fields correspond to table columns. 

Types of Record datatype
-------------------------
In Oracle PL/SQL we have three types of Record datatype.
 A) Table Based Record        
          Syntex: Variable_ name   table_name%ROWTYPE;
 B) Cursor Based Record, and   
          Syntex:    
          CURSOR cur_RebellionRider IS
          SELECT first_name, salary FROM employees WHERE employee_id > 200; 
          var_emp   cur_RebellionRider%ROWTYPE;
           BEGIN
           OPEN cur_RebellionRider;
           FETCH cur_RebellionRider INTO var_emp;
           DBMS_OUTPUT.PUT_LINE (var_emp.first_name);
 C) User Defined Record.       
         Syntex:
         TYPE rv_dept IS RECORD(f_name  VARCHAR2(20), d_name  departments.department_name%type);
         var1 rv_dept;

---------------------------- 03. When to use (DML/DDL) dynamic SQL and Example? ------------------------------------

You should use dynamic SQL in cases where static SQL does not support the operation you want to perform, 
or in cases where you do not know the exact SQL statements

DECLARE
    sql_qry     VARCHAR2 (150);
    emp_tot     NUMBER(3);
BEGIN    
    sql_qry:= ‘SELECT count (*) FROM employees';
    EXECUTE IMMEDIATE sql_qry INTO emp_tot;
    DBMS_OUTPUT.PUT_LINE ('Total employees are: '||emp_tot);
END;


----------------------- What is/When to use NESTED TABLE/VARRAYs/ASSOCIATIVE Array? (Topic: Collection) ----------------------------

NESTED TABLE (TABLE INSIDE A TABLE):---
CREATE TABLE Base_Table(
   tab_id  NUMBER,
   tab_ele My_NT
)NESTED TABLE tab_ele STORE AS stor_tab_1;
 /
 INSERT INTO base_table (tab_id, tab_ele) VALUES
 (801,  -- value for 1st colum 
   My_NT (object_type (1,'Superman') -- values for 2nd column )
 );
 /
 UPDATE base_table SET tab_ele = My_NT(object_type(1,'SpiderMan')) WHERE tab_id = 801; 
 /
 Select tab_id, tab_ele FROM base_table;
 /SELECT * FROM TABLE(
  SELECT tab_ele FROM Base_Table WHERE tab_id = 801
)
VARRY:-------
An array ( a data structure) as a fixed-size sequential collection of variables of the same type.
DECLARE
    TYPE r_customer_type IS RECORD(
        customer_name customers.name%TYPE,
        credit_limit customers.credit_limit%TYPE
    ); 

    TYPE t_customer_type IS VARRAY(5) 
        OF r_customer_type;
    
    t_customers t_customer_type := t_customer_type();

    CURSOR c_customer IS 
        SELECT NAME, credit_limit 
        FROM customers 
        ORDER BY credit_limit DESC 
        FETCH FIRST 5 ROWS ONLY;
BEGIN
    -- fetch data from a cursor
    FOR r_customer IN c_customer LOOP
        t_customers.EXTEND;
        t_customers(t_customers.LAST).customer_name := r_customer.name;
        t_customers(t_customers.LAST).credit_limit  := r_customer.credit_limit;
    END LOOP;

    -- show all customers
    FOR l_index IN t_customers .FIRST..t_customers.LAST 
    LOOP
        dbms_output.put_line(
            'The customer ' ||
            t_customers(l_index).customer_name ||
            ' has a credit of ' ||
            t_customers(l_index).credit_limit
        );
    END LOOP;

END;

ASSOCIATIVE ARRAY:---
Associative arrays are single-dimensional, unbounded, sparse collections of homogeneous elements.

DECLARE
    -- declare an associative array type
    TYPE t_capital_type 
        IS TABLE OF VARCHAR2(100) 
        INDEX BY VARCHAR2(50);
    -- declare a variable of the t_capital_type
    t_capital t_capital_type;
    -- local variable
    l_country VARCHAR2(50);
BEGIN
    
    t_capital('USA')            := 'Washington, D.C.';
    t_capital('United Kingdom') := 'London';
    t_capital('Japan')          := 'Tokyo';
    
    l_country := t_capital.FIRST;
    
    WHILE l_country IS NOT NULL LOOP
        dbms_output.put_line('The capital of ' || 
            l_country || 
            ' is ' || 
            t_capital(l_country));
        l_country := t_capital.NEXT(l_country);
    END LOOP;
END;
---------------------------------05. How to select BULK DATA and show ? (Topic: Bulk collection)---------

SET SERVEROUTPUT ON;
DECLARE
--Create an explicit cursor
    CURSOR exp_cur IS
    SELECT first_name FROM employees;

    --Declare collection for holding the data 
    TYPE nt_fName   IS TABLE OF VARCHAR2 (20);
    fname   nt_fName;
BEGIN
    OPEN exp_cur;
    LOOP
        FETCH exp_cur BULK COLLECT INTO fname LIMIT 10;
        EXIT WHEN fname.count=0;
        --Print data
        FOR idx IN fname.FIRST.. fname.LAST
        LOOP
            DBMS_OUTPUT.PUT_LINE (idx||' '||fname(idx) );
        END LOOP; 
    END LOOP;
    CLOSE exp_cur;
END;

--------------06. When to use these Collection Functions:-- (Topic: Collection Methode)--------------------------

IF var_nt.count >= 10 THEN
IF col_var_1.EXISTS (1) THEN
col_var nt_tab := nt_tab(10, 20, 30, 40, 50);
DBMS_OUTPUT.PUT_LINE ('First Index of the Nested table is ' || col_var.FIRST/LAST);
DBMS_OUTPUT.PUT_LINE ('First Index of the Nested table is ' || col_var.PRIOR(2)/NEXT(2));

Porcudure
---------
var_tab.DELETE(2,6);
var_tab.TRIM(2);
TYPE inblock_vry IS VARRAY ( 5 ) OF NUMBER;
    vry_obj   inblock_vry := inblock_vry ();
BEGIN
    --Insert into VARRAY
    vry_obj.extend;
    vry_obj(1) := 10 * 2;
    


--------------------------------- 07. What is/When to use a FORALL statement? ----------------------------
FORALL statement helps to process bulk data in an optimized manner by sending DML statements. FORALL is the Oracle Reserved Keyword.
Although FORALL statement iterates through all the rows of a collection but it is not a FOR loop.

SET SERVEROUTPUT ON;
CREATE TABLE tut_77 (
    Mul_tab    NUMBER(5)
);
That is going to be our table which will hold the data. Next we will write the PL/SQL block.

DECLARE
	-- Declare the collection
    TYPE My_Array IS TABLE OF NUMBER INDEX BY PLS_INTEGER;
    col_var My_Array;
	--Declare a variable for holding the total number of records of the table
    tot_rec NUMBER;
BEGIN
    --Populate the collection
    FOR i IN 1..10 LOOP
        col_var (i) := 9*i;
    END LOOP;
    -- Write the FORALL statement.
    FORALL idx IN 1..10
        INSERT INTO tut_77 (mul_tab)
        VALUES (col_var (idx));
    --Get the total number of records from the table     
    SELECT count (*) INTO tot_rec FROM tut_77;
    DBMS_OUTPUT.PUT_LINE ('Total records inserted are '||tot_rec);
END;


---------08. What are/When to use PL/SQL Strong/Weak/SYS_REFCURSOR Ref Cursors? (Topic: Cursors -Reff (Strong, Weak and SYS_REFCURSOR) Cursor)?-------------
STRONG REFF CURSOR:
------------------
A ref cursor which has fixed return type is called a Strong Ref Cursor in Oracle Database.
Can we use Strong Ref Cursor with any SELECT statement? Ans: NO. This is because of the fixed ‘Return Type’.

A Strong Ref Cursor with Table Based Record Datatype:

 DECLARE
	--Create User-Defined Record Datatype
    TYPE my_rec IS RECORD (
        emp_sal employees.salary%TYPE
        );
	--Declare Strong Ref Cursor
    TYPE RefCur IS REF CURSOR RETURN my_rec;
    cur_var REFCUR;
	--Another anchored datatype variable for holding data
    at_var  employees.salary%TYPE;
BEGIN
   OPEN cur_var FOR SELECT salary FROM employees WHERE employee_id = 100;
    FETCH cur_var INTO at_var;
    CLOSE cur_var;
    DBMS_OUTPUT.PUT_LINE ('Salary of the employee is '||at_var);
END;


WEEK REFF CURSOR:
-----------------
A ref cursor which does not have a fixed return type is called a Weak Ref Cursor.
07. How to create Weak Ref Cursor?
------------------------------
SET SERVEROUTPUT ON;
DECLARE
    /*Declare Weak Ref Cursor*/
    TYPE wk_RefCur IS REF CURSOR;
    /*Declare Cursor Variable of ref cursor type*/
    cur_var wk_RefCur;
    
     /*Declare two "Anchored Datatype Variable" for holding data from the cursor*/
    f_name  employees.first_name%TYPE;
    emp_sal employees.salary%TYPE;
BEGIN
    OPEN cur_var FOR SELECT first_name, Salary FROM employees WHERE employee_id = 100;
    FETCH cur_var INTO f_name, emp_sal;
    CLOSE cur_var;
    DBMS_OUTPUT.PUT_LINE (f_name ||' '||emp_sal);
END;

SYS_REFCURSOR
-------------
SYS_REFCURSOR is a predefined weak ref cursor which comes built-in with the Oracle database software.
SYS_REFCURSOR is a predefined weak ref cursor which means we do not have to define it into our code like we did with the explicit weak ref cursor.
Why would someone declare a weak ref cursor when we already have a predefined one?
Ans: No, we do not need to create a weak ref cursor explicitly.
     It is like a personal choice, if someone wants to create a weak ref cursor then they can. 
     If not, then they have SYS_REFCURSOR always at their disposal. 
     
DECLARE
    --Declare cursor variable of SYS_REFCURSOR type
    cur_var SYS_REFCURSOR;
    
    --Declare variables for holding data
    f_name  employees.first_name%TYPE;
    emp_sal employees.salary%TYPE;
BEGIN
OPEN cur_var FOR SELECT first_name, Salary FROM employees WHERE employee_id = 100;
    FETCH cur_var INTO f_name, emp_sal;
    CLOSE cur_var;
    DBMS_OUTPUT.PUT_LINE(f_name ||' '||emp_sal);
END;

-------------------------- What is/When to use Trigger? When to use what trigger/Type of trigger?-------------------

What/Why is Trigger? Where/How it works?
--------------------------------------------
-Specialized stored programs For *Auditing (Table/Schema/Database) which execute implicitly(পরোক্ষভাবে) when a triggering event(DML,DDL,SYTEM and USER)s occurs.
-Cannot call and execute them directly instead they only get triggered by events in the database.
  *Keep an eye on the various changes on Table/Schema/Database). 
  *Enforce business rules.

CREATE OR REPLACE trigger superheroes_audit
BEFORE INSERT OR DELETE OR UPDATE ON superheroes
FOR EACH ROW
ENABLE
EXAMLE:----

Audit to a TABLE
----------------
DECLARE
  v_user varchar2 (30);
  v_date  varchar2(30);
BEGIN
  SELECT user, TO_CHAR(sysdate, 'DD/MON/YYYY HH24:MI:SS') INTO v_user, v_date  FROM dual;
  IF INSERTING THEN
    INSERT INTO sh_audit (new_name,old_name, user_name, entry_date, operation) 
    VALUES(:NEW.CUST_NAME, Null , v_user, v_date, 'Insert');
  ELSIF UPDATING THEN
    INSERT INTO sh_audit (new_name,old_name, user_name, entry_date, operation) 
    VALUES(:NEW.CUST_NAME, :OLD.CUST_NAME, v_user, v_date, 'Insert');
  ELSIF DELETING THEN
    INSERT INTO sh_audit (new_name,old_name, user_name, entry_date, operation) 
    VALUES(Null, :OLD.CUST_NAME, v_user, v_date, 'Delete');
  END IF;
END;

Audit to Schema(Any user)
--------------------------
CREATE OR REPLACE TRIGGER hr_audit_tr 
AFTER DDL ON SCHEMA

Audit to Database
------------------
CREATE OR REPLACE TRIGGER db_audit_tr 
AFTER DDL ON DATABASE

INSTEAD OF INSERT Trigger- Only works on VIEWS
----------------------------------------------
CREATE OR REPLACE TRIGGER tr_Io_Insert
INSTEAD OF INSERT ON vw_rebellionrider
FOR EACH ROW
BEGIN
  INSERT INTO trainer (full_name) VALUES (:new.full_name);
END


---------------------------------------- 10. Why/How to create and use a PL/SQL Packages? What a packege contain?-----------------------

What/Why are PL/SQL Packages?
---------------------------------
-Logical groups(libraries) of related PL/SQL objects under one name.
-Permanently stored into the database schema. -Can be referenced or reused by your program.

Syntax of the package body:
---------------------------
CREATE OR REPALCE PACKAGE BODY pkg_name IS
	Variable declaration;
	Type Declaration;
BEGIN
	Implementation of the package elements…
END [pkg_name];



--------------------------------------------11. How to create and use as FUNCTION and PROCEDURE?--------------------------------------

-Similer A self-contained sub-program that is meant to do some specific well defined task. 
-Also Can be stored into the database as a database object and can be reused.
-BUT UNLIKE PL/SQL FUNCTIONS A STORED PROCEDURE DOES NOT RETURN ANY VALUE.

FUNCTION SYNTEX:
----------------
--Function Header
CREATE OR REPLACE FUNCTION circle_area (radius NUMBER) 
RETURN NUMBER IS
--Declare a constant and a variable
pi  	CONSTANT NUMBER(7,2) :=	3.141;
area 	NUMBER(7,2);
BEGIN
  --Area of Circle pi*r*r;
  area := pi * (radius * radius);
  RETURN area; 
END;
/
Call above Fuction:
BEGIN
 DBMS_OUTPUT.PUT_LINE (circle_area(20));
END;

Syntax of PL/SQL Stored Procedures
----------------------------------
CREATE OR REPLACE PROCEDURE emp_sal
(dep_id NUMBER, sal_raise NUMBER) 
IS
BEGIN
  	UPDATE employees 
SET salary = salary * sal_raise 
WHERE department_id = dep_id;  
DBMS_OUTPUT.PUT_LINE ('salary updated successfully');
END;
/
Calling  Procedure:
EXECUTE emp_sal(40,2);




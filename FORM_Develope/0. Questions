




00. What is an Exception? Type of Exception?
01. What is/When to use Cursors, example?
02. What is a Record? When to use what-Record/Types of Record?

03. When to use (DML/DDL) dynamic SQL and Example? (Topic: Native Dynamic SQL)
04. What is/When to use NESTED TABLE/VARRAYs/ASSOCIATIVE Array? (Topic: Collection)

05. How to select BULK DATA and show ? (Topic: Bulk collection)
06. When to use these Collection Functions:-- (Topic: Collection Methode)
                          A) Count  B) Exists C) First, Last D) Limit E) Prior, Next
                      Collection Procedures:--
                          A) Delete B) Extend C) Trim
07. What is/When to use a FORALL statement?

08. What are/When to use PL/SQL Strong/Weak/SYS_REFCURSOR Ref Cursors? (Topic: Cursors -Reff (Strong, Weak and SYS_REFCURSOR) Cursor)?
09. What is/When to use Trigger? When to use what trigger/Type of trigger?
10. Why/How to create a PL/SQL Packages? What a packege contain?



Questions to look for answer:
-----------------------------
01. Why I use EXCEPTION while I can do same job with DBMS_OUTPUT.PUT_LINE()?
02. 



==================================================== ANSWERs =========================================
----------------------00. What is an Exception? Type of Exception?-----------------------------------------

DECLARE 
   c_id customers.id%type := &cc_id; 
   c_name customerS.Name%type; 
   c_addr customers.address%type;  
   -- user defined exception 
   ex_invalid_id  EXCEPTION; 
BEGIN 
   IF c_id <= 0 THEN 
      RAISE ex_invalid_id; 
   ELSE 
      SELECT  name, address INTO  c_name, c_addr 
      FROM customers 
      WHERE id = c_id;
      DBMS_OUTPUT.PUT_LINE ('Name and Address: '||  c_name ' || c_addr);  
   END IF; 

EXCEPTION 
   WHEN ex_invalid_id THEN 
      dbms_output.put_line('ID must be greater than zero!'); 
   WHEN no_data_found THEN 
      dbms_output.put_line('No such customer!'); 
   WHEN others THEN 
      dbms_output.put_line('Error!');  
END;


-----------------------------------------------01. What is Cursor with example?-------------------------------------------

A special memory region inside the Process Global Area (PGA) which helps oracle server in processing an SQL statement
This includes:
> Rows returned by a query. > Number of rows processed by a query.
> A pointer to the parsed query in the shared pool.
> Using cursor you can control the context area as it is a pointer to the same.

EXAMPLE:-----
DECLARE
  v_name VARCHAR2(30);
  v_age  NUMBER(10);
  CURSOR cur_RebellionRider
  IS
  SELECT name, age FROM customers; 
BEGIN
  OPEN cur_rebellionrider;
  LOOP
    FETCH cur_rebellionrider INTO v_name, v_age; 
    EXIT WHEN cur_rebellionrider%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(v_name ||' '||v_age); 
  END LOOP;
  CLOSE cur_rebellionrider;
END;



--------------------------------------02. What is a Record  and its type in datatype?--------------------------------------------------

A record is a group of related data items stored in fields, each with its own name and datatype. The fields correspond to table columns. 

Types of Record datatype
-------------------------
In Oracle PL/SQL we have three types of Record datatype.
 A) Table Based Record        
          Syntex: Variable_ name   table_name%ROWTYPE;
 B) Cursor Based Record, and   
          Syntex:    
          CURSOR cur_RebellionRider IS
          SELECT first_name, salary FROM employees WHERE employee_id > 200; 
          var_emp   cur_RebellionRider%ROWTYPE;
           BEGIN
           OPEN cur_RebellionRider;
           FETCH cur_RebellionRider INTO var_emp;
           DBMS_OUTPUT.PUT_LINE (var_emp.first_name);
 C) User Defined Record.       
         Syntex:
         TYPE rv_dept IS RECORD(f_name  VARCHAR2(20), d_name  departments.department_name%type);
         var1 rv_dept;

---------------------------- 03. When to use (DML/DDL) dynamic SQL and Example? ------------------------------------

You should use dynamic SQL in cases where static SQL does not support the operation you want to perform, 
or in cases where you do not know the exact SQL statements

DECLARE
    sql_qry     VARCHAR2 (150);
    emp_tot     NUMBER(3);
BEGIN    
    sql_qry:= â€˜SELECT count (*) FROM employees';
    EXECUTE IMMEDIATE sql_qry INTO emp_tot;
    DBMS_OUTPUT.PUT_LINE ('Total employees are: '||emp_tot);
END;


----------------------- What is/When to use NESTED TABLE/VARRAYs/ASSOCIATIVE Array? (Topic: Collection) ----------------------------

NESTED TABLE (TABLE INSIDE A TABLE):---
CREATE TABLE Base_Table(
   tab_id  NUMBER,
   tab_ele My_NT
)NESTED TABLE tab_ele STORE AS stor_tab_1;
 /
 INSERT INTO base_table (tab_id, tab_ele) VALUES
 (801,  -- value for 1st colum 
   My_NT (object_type (1,'Superman') -- values for 2nd column )
 );
 /
 UPDATE base_table SET tab_ele = My_NT(object_type(1,'SpiderMan')) WHERE tab_id = 801; 
 /
 Select tab_id, tab_ele FROM base_table;
 /SELECT * FROM TABLE(
  SELECT tab_ele FROM Base_Table WHERE tab_id = 801
)
VARRY:-------
An array ( a data structure) as a fixed-size sequential collection of variables of the same type.
DECLARE
    TYPE r_customer_type IS RECORD(
        customer_name customers.name%TYPE,
        credit_limit customers.credit_limit%TYPE
    ); 

    TYPE t_customer_type IS VARRAY(5) 
        OF r_customer_type;
    
    t_customers t_customer_type := t_customer_type();

    CURSOR c_customer IS 
        SELECT NAME, credit_limit 
        FROM customers 
        ORDER BY credit_limit DESC 
        FETCH FIRST 5 ROWS ONLY;
BEGIN
    -- fetch data from a cursor
    FOR r_customer IN c_customer LOOP
        t_customers.EXTEND;
        t_customers(t_customers.LAST).customer_name := r_customer.name;
        t_customers(t_customers.LAST).credit_limit  := r_customer.credit_limit;
    END LOOP;

    -- show all customers
    FOR l_index IN t_customers .FIRST..t_customers.LAST 
    LOOP
        dbms_output.put_line(
            'The customer ' ||
            t_customers(l_index).customer_name ||
            ' has a credit of ' ||
            t_customers(l_index).credit_limit
        );
    END LOOP;

END;

ASSOCIATIVE ARRAY:---
Associative arrays are single-dimensional, unbounded, sparse collections of homogeneous elements.

DECLARE
    -- declare an associative array type
    TYPE t_capital_type 
        IS TABLE OF VARCHAR2(100) 
        INDEX BY VARCHAR2(50);
    -- declare a variable of the t_capital_type
    t_capital t_capital_type;
    -- local variable
    l_country VARCHAR2(50);
BEGIN
    
    t_capital('USA')            := 'Washington, D.C.';
    t_capital('United Kingdom') := 'London';
    t_capital('Japan')          := 'Tokyo';
    
    l_country := t_capital.FIRST;
    
    WHILE l_country IS NOT NULL LOOP
        dbms_output.put_line('The capital of ' || 
            l_country || 
            ' is ' || 
            t_capital(l_country));
        l_country := t_capital.NEXT(l_country);
    END LOOP;
END;
---------------------------------05. How to select BULK DATA and show ? (Topic: Bulk collection)---------







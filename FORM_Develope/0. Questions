


--What is/Advantage of PL/SQL? Why do we use PL/SQL instead of SQL?
--What is PL/SQL Identifier and Delimeter?

00. Why does ERROR occur? How to indentify using user define function?
    -How can we force a user input 500 tk must as initial ammount, otherwise SHOW 'Initial amount must be equal or greater than 500'

01. Explain data types in PL/SQL?

02. What is a Record? When to use what-Record/Types of Record?
03. What is/When to use NESTED TABLE/ASSOCIATIVE Array/VARRAYs/? (Topic: Collection)
04. When to use these Collection Functions:-- (Topic: Collection Methode)
     A) Count  B) Exists C) First, Last D) Limit E) Prior, Next ----> Procedures:- A) Delete B) Extend C) Trim

05. What is/When to use Cursors, example? IMPLICITE vs EXPLICITE cursor?
    -What are/When to use PL/SQL Strong/Weak/SYS_REFCURSOR Ref Cursors? 
      (Topic: Cursors -Reff (Strong, Weak and SYS_REFCURSOR) Cursor)?

06. When to use (DML/DDL) dynamic SQL and Example? (Topic: Native Dynamic SQL)
    
07. How to select BULK DATA and show ? (Topic: Bulk collection)
08. What is/When to use a FORALL statement?

09. What is/When to use Trigger? When to use what trigger/Type of trigger?
10. Why/How to create and use a PL/SQL Packages? What a packege contain?

11. FUNCTION VS PROCEDURE, How to create and use as FUNCTION and PROCEDURE?


--------------------------------------------------------------------------------



Why do we use PL/SQL instead of SQL?
------------------------------------
-Procedural Extension Language of SQL
By grouping SQL statements, a stored PROCEDURE allows them to be executed with a single call. 
  This minimizes the use of 
  -SLOW networks, 
  -REDUCES network traffic, and 
  -IMPROVE round-trip response time.
** Other hand, SQL execute a single statement at a time. 

PL/SQL Identifiers:
-------------------
-Are variables, exceptions, cursors, procedures, constants and reserved words.
-Consist of a letter should not exceed 30 characters.
-NOT case-sensitive, By default. 
-Cannot use a reserved keyword as an identifier.
-Optionally followed by more letters, numerals, dollar signs, underscores, and number signs. 

PL/SQL Delimeter:
-----------------
A symbol with a special meaning.
Delimiter:  Description:
:=          Assignment operator
<=, >=	    Relational operators
||          Concatenation operator for joining two strings



==================================================== ANSWERs =========================================

----------------------00. Why does ERROR occur? How to indentify using user define function?-----------------------------------------
Error occur while code is executing. 
These errors can arise due to DATA problems or CODE problems. 
For instance, attempting to assign a 31-character string to a varchar2 (30) variable will cause a runtime error.

PL/SQL allows you to define your own exceptions according to the need of your program. 
A user-defined exception must be declared and then raised explicitly.



----------------------------01. Explain data types in PL/SQL?-----------------------------------------
PL/SQL has MAINLY two kinds of data types: 
01. SCALAR TYPES:--  store single values, have 4 different categories- Number, Character and String, Boolean and Date and Time etc.
02. COMPOSITE TYPES:-- store multiple values(data structure). Example, record and collection.

REFERENCE TYPES:-- is used to hold pointer values which generally stores address of other program items EX: REF CURSOR AND REFS.
LARGE OBJECT (LOB) TYPE:-- refer to large data items such as text, graphic images, video clips, and sound waveforms. Type Ex: BLOB, CLOB, NCLOB, BFILE



--------------------------- 02.What is a Record? When to use what-Record/Types of Record? ----------------------------------

A record is a group of related data items stored in fields, each with its own name and datatype. The fields correspond to table columns. 

Types of Record datatype
-------------------------
In Oracle PL/SQL we have three types of Record datatype.
 
A) CURSOR BASED RECORD------------
B) TABLE(ROW & COL) BASED RECORD------------
C) USER DEFINED RECORD------------


	

----------------------- 03. What is/When to use ASSOCIATIVE Array/NESTED TABLE/VARRAYs? (Topic: Collection) ----------------------------

**Nested tables can be stored in a database column and the Associative Array cannot.

A) ASSOCIATIVE ARRAY
B) NESTED TABLE
C) VARRY


--------------04. When to use these Collection Functions:-- (Topic: Collection Methode)--------------------------

IF var_nt.count >= 10 THEN
IF col_var_1.EXISTS (1) THEN
col_var nt_tab := nt_tab(10, 20, 30, 40, 50);
DBMS_OUTPUT.PUT_LINE ('First Index of the Nested table is ' || col_var.FIRST/LAST);
DBMS_OUTPUT.PUT_LINE ('First Index of the Nested table is ' || col_var.PRIOR(2)/NEXT(2));

Porcudure
---------
var_tab.DELETE(2,6);
var_tab.TRIM(2);
TYPE inblock_vry IS VARRAY ( 5 ) OF NUMBER;
    vry_obj   inblock_vry := inblock_vry ();
BEGIN
    --Insert into VARRAY
    vry_obj.extend;
    vry_obj(1) := 10 * 2;

-----------------------------------------------05. What is/When to use Cursor with example?-------------------------------------------

When To perform multiple operations ROW by ROW(in the result set), with or without returning to the original table.

A special memory region inside the Process Global Area (PGA) which helps oracle server in processing an SQL statement
This includes:
> Rows returned by a query. 
> Number of rows processed by a query.

There are two types of cursor:
------------------------------
Implicit Cursors:--------
Implicit cursors are automatically created when select statements are executed.	
They are capable of fetching a single row at a time. 
SYNTEX:---
BEGIN
SELECT col INTO var FROM table WHERE something;
END

Explicit Cursors:--------
Explicit cursors needs to be defined explicitly by the user by providing a name.
Explicit cursors can fetch multiple rows.
SYNTEX:---
DECLARE   
  CURSOR cur IS SELECT col FROM table WHERE something; 
BEGIN
  OPEN cur;
  FETCH cur INTO var;
  CLOSE cur;
END;
	 
What are/When to use PL/SQL Strong/Weak/SYS_REFCURSOR Ref Cursors? 
------------------------------------------------------------------
STRONG REFF CURSOR:
------------------
A ref cursor which has fixed return type is called a Strong Ref Cursor in Oracle Database.
Can we use Strong Ref Cursor with any SELECT statement? Ans: NO. This is because of the fixed ‘Return Type’.

WEEK REFF CURSOR:
-----------------
A ref cursor which does not have a fixed return type is called a Weak Ref Cursor.

SYS_REFCURSOR
-------------
SYS_REFCURSOR is a predefined weak ref cursor which comes built-in with the Oracle database software.
SYS_REFCURSOR is a predefined weak ref cursor which means we do not have to define it into our code like we did with the explicit weak ref cursor.
Why would someone declare a weak ref cursor when we already have a predefined one?
Ans: No, we do not need to create a weak ref cursor explicitly.
     It is like a personal choice, if someone wants to create a weak ref cursor then they can. 
     If not, then they have SYS_REFCURSOR always at their disposal. 
     

---------------------------- 06. When to use (DML/DDL) dynamic SQL and Example? ------------------------------------

You should use dynamic SQL in cases where static SQL does not support the operation you want to perform, 
or in cases where you do not know the exact SQL statements

DECLARE
    sql_qry     VARCHAR2 (150);
    emp_tot     NUMBER(3);
BEGIN    
    sql_qry:= ‘SELECT count (*) FROM employees';
    EXECUTE IMMEDIATE sql_qry INTO emp_tot;
    DBMS_OUTPUT.PUT_LINE ('Total employees are: '||emp_tot);
END;



---------------------------------07. How to select BULK DATA and show ? (Topic: Bulk collection)---------


    
--------------------------------- 08. What is/When to use a FORALL statement? ----------------------------
FORALL statement helps to process bulk data in an optimized manner by sending DML statements. FORALL is the Oracle Reserved Keyword.
Although FORALL statement iterates through all the rows of a collection but it is not a FOR loop.

SET SERVEROUTPUT ON;
CREATE TABLE tut_77 (
    Mul_tab    NUMBER(5)
);
That is going to be our table which will hold the data. Next we will write the PL/SQL block.

DECLARE
	-- Declare the collection
    TYPE My_Array IS TABLE OF NUMBER INDEX BY PLS_INTEGER;
    col_var My_Array;
	--Declare a variable for holding the total number of records of the table
    tot_rec NUMBER;
BEGIN
    --Populate the collection
    FOR i IN 1..10 LOOP
        col_var (i) := 9*i;
    END LOOP;
    -- Write the FORALL statement.
    FORALL idx IN 1..10
        INSERT INTO tut_77 (mul_tab)
        VALUES (col_var (idx));
    --Get the total number of records from the table     
    SELECT count (*) INTO tot_rec FROM tut_77;
    DBMS_OUTPUT.PUT_LINE ('Total records inserted are '||tot_rec);
END;



--------------------------09. What is/When to use Trigger? When to use what trigger/Type of trigger?-------------------

What/Why is Trigger? Where/How it works?
----------------------------------------
Triggers are stored programs, which are automatically executed or fired implicitly(পরোক্ষভাবে) 
when any of the following events occur:-
A database manipulation (DML) statement (DELETE, INSERT, or UPDATE)
A database definition (DDL) statement (CREATE, ALTER, or DROP).
A database operation (SERVERERROR, LOGON, LOGOFF, STARTUP, or SHUTDOWN).
Triggers can be defined on the table, view, schema, or database with which the event is associated.

Benefits of Triggers
---------------------
Triggers can be written for the following purposes −
 > Event logging and storing information on table access
 > Generating some derived column values automatically
 > Auditing
 > Synchronous replication of tables
 > Imposing security authorizations
 > Preventing invalid transactions



CREATE OR REPLACE trigger superheroes_audit
BEFORE INSERT OR DELETE OR UPDATE ON superheroes
FOR EACH ROW
ENABLE
EXAMLE:----

Audit to a TABLE
----------------
DECLARE
  v_user varchar2 (30);
  v_date  varchar2(30);
BEGIN
  SELECT user, TO_CHAR(sysdate, 'DD/MON/YYYY HH24:MI:SS') INTO v_user, v_date  FROM dual;
  IF INSERTING THEN
    INSERT INTO sh_audit (new_name,old_name, user_name, entry_date, operation) 
    VALUES(:NEW.CUST_NAME, Null , v_user, v_date, 'Insert');
  ELSIF UPDATING THEN
    INSERT INTO sh_audit (new_name,old_name, user_name, entry_date, operation) 
    VALUES(:NEW.CUST_NAME, :OLD.CUST_NAME, v_user, v_date, 'Insert');
  ELSIF DELETING THEN
    INSERT INTO sh_audit (new_name,old_name, user_name, entry_date, operation) 
    VALUES(Null, :OLD.CUST_NAME, v_user, v_date, 'Delete');
  END IF;
END;

Audit to Schema(Any user)
--------------------------
CREATE OR REPLACE TRIGGER hr_audit_tr 
AFTER DDL ON SCHEMA

Audit to Database
------------------
CREATE OR REPLACE TRIGGER db_audit_tr 
AFTER DDL ON DATABASE

INSTEAD OF INSERT Trigger- Only works on VIEWS
----------------------------------------------
CREATE OR REPLACE TRIGGER tr_Io_Insert
INSTEAD OF INSERT ON vw_rebellionrider
FOR EACH ROW
BEGIN
  INSERT INTO trainer (full_name) VALUES (:new.full_name);
END


---------------------------------------- 10. Why/How to create and use a PL/SQL Packages? What a packege contain?-----------------------

What/Why are PL/SQL Packages?
---------------------------------
-Logical groups(libraries) of related PL/SQL objects under one name.
-Permanently stored into the database schema. -Can be referenced or reused by your program.

Syntax of the package body:
---------------------------
CREATE OR REPALCE PACKAGE BODY pkg_name IS
	Variable declaration;
	Type Declaration;
BEGIN
	Implementation of the package elements…
END [pkg_name];



--------------------------------------------11. How to create and use as FUNCTION and PROCEDURE?--------------------------------------

-Similer A self-contained sub-program that is meant to do some specific well defined task. 
-Also Can be stored into the database as a database object and can be reused.
-BUT UNLIKE PL/SQL FUNCTIONS A STORED PROCEDURE DOES NOT RETURN ANY VALUE.






